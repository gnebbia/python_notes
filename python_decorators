```python
def strong(func):
    def wrapper():
        return '<strong>' + func() + '</strong>'
    return wrapper

def emphasis(func):
    def wrapper():
        return '<em>' + func() + '</em>'
    return wrapper
```

Now let’s take these two decorators and apply them to our greet function at the same time. 
You can use the regular @ syntax for that and just “stack” 
multiple decorators on top of a single function:

```python
@strong
@emphasis
def greet():
    return 'Hello!'
```

What output do you expect to see if you run the decorated function? Will the @emphasis decorator 
add its <em> tag first or does @strong have precedence? Here’s what happens when you call the decorated function:

```python
>>> greet()
'<strong><em>Hello!</em></strong>'
```


```python
## Decorators with arguments
def trace(func):
    def wrapper(*args, **kwargs):
        print(f'TRACE: calling {func.__name__}() '
              f'with {args}, {kwargs}')

        original_result = func(*args, **kwargs)

        print(f'TRACE: {func.__name__}() '
              f'returned {original_result!r}')

        return original_result
    return wrapper
```


```python
@trace
def say(name, line):
    return f'{name}: {line}'
```

```python
>>> say('Jane', 'Hello, World')
'TRACE: calling say() with ("Jane", "Hello, World"), {}'
'TRACE: say() returned "Jane: Hello, World"'
'Jane: Hello, World'
```
